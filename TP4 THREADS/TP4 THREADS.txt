1-Ventajas de threads por sobre los procesos:

a-Lleva menos tiempo crear un nuevo hilo en un proceso que otro proceso totalmente nuevo.
b-Lleva menos tiempo el finalizar un hilo que un proceso.
c-Lleva menos tiempo cambiar entre 2 hilos que entre 2 procesos.
d-Mejoran la eficiencia de comunicación entre los diferentes programas que se están ejecutando.

2-
A-Al ser nivel usuario no los lee el sistema operativo, compartiendo todos el mismo tiempo de ejecución. El planificador solo ve un monohilo y lo ejecuta en la CPU de esa manera
B-Bloqueo de los procesos por las llamadas al sistema operativo, el núcleo no es consciente de los multiples hilos y por lo tanto no se mueve a otro mientras esta bloqueado
C-La planificación esta limitada por la planificación del núcleo a nivel de procesos, todos los hilos a nivel usuario se detendrán si el núcleo decide cambiar de proceso en ejecución.

3-Es posible esto, en donde los tiempos de inicio y finalización no esten controlados haciendo que estos hilos se imprimirán simplemente a la velocidad de que cada uno termine.

4-
La funcion1 muestra que thread es utilizando pthread_self para ver el ID único de cada hilo y sale termina el hilo con la función pthread_exit.
MAIN:
crea el conjunto de atributos con pthread_attr_t y le da de nombre attr.
crea un arreglo de threads llamado thid de tamaño 10(MAX definido arriba del programa)
Inicia la estructura de atributos de hilo creado en el primer paso
hace que el atributo de los hilos sea DETACHED que significa que cuando se terminen dejaran de estar en la memoria, esto hace que no pueda sacar el status de terminación ni hacerlos esperar con el pthread join.
loop para crear cada uno de los 10 hilos, todos para que sean usados en la funcion1 y que tengan el atributo anterior DETACHED

estando asi no siempre llegan a terminar todos los hilos debido a que el tiempo de finalización del main puede no darle el tiempo a que los 10 hilos sean llamados
al descomentar el código lo que hace es que el programa main espere esa cantidad de tiempo, dándole tiempo asi a que todos los hilos puedan ocurrir

5-
Sin comentar todos los threads terminan en el programa.
Con los dos pthread_join comentados, el único hilo que esta asegurado de terminarse es el de main. Los otros 2 el comportamiento es aleatorio e impredecible

ejecucion tras varios intentos
integer overflow con el ID de programa al utilizar getpid
complicado saber si los 10 threads se ejecutaron debido a la gran cantidad de muestras por pantalla
nuevo intento, mismo ID de proceso en cada muestra por pantalla
muestra todas las 10000 veces que se escribe por hilo? (no se)

	

